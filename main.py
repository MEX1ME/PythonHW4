# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями).
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества.
# m — кол-во элементов второго множества. Затем пользователь вводит сами элементы множеств.


# n = int(input("Введите кол-во элементов первого множества: "))
# nNums = []
# i = 0
# while i < n:
#     nNums.append(int(input(f"Введите Элемент множества под номером {i+1}: ")))
#     i += 1

# m = int(input("Введите кол-во элементов второго множества: "))
# mNums = []
# i = 0
# while i < m:
#     mNums.append(int(input(f"Введите Элемент множества под номером {i+1}: ")))
#     i += 1

# numSet = nNums + mNums
# numSet = list(set(numSet))

# for j in range(1, len(numSet)):
#         temp = numSet[j]
#         k = j - 1
#         while (k >= 0 and temp < numSet[k]):
#             numSet[k + 1] = numSet[k]
#             k = k - 1
#         numSet[k + 1] = temp

# print(numSet)


# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику.
# Она растёт на круглой грядке, причём кусты высажены только по окружности.
# Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью,
# поэтому ко времени сбора на них выросло различное число ягод — на i-ом кусте выросло a[i] ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники.
# Эта система состоит из управляющего модуля и нескольких собирающих модулей.
# Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом,
# собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод,
# которое может собрать за один заход собирающий модуль, находясь перед
# некоторым кустом заданной во входном списке урожайности грядки.
# import random

# bush = int(input("Сколько кустов растет на грядке, введите число "))
# bed = []
# for i in range(bush):
#     bed.append(random.randint(0, 10))
# print(bed)

# doubleBed = bed + bed + bed
# max_sums = []

# for i in range(len(bed)):
#     current_sum = doubleBed[i] + doubleBed[i + 1] + doubleBed[i + 2]
#     max_sums.append(current_sum)

# j = 0
# max = j
# while j < len(max_sums):
#     if max_sums[j] > max_sums[max]:
#         max = j
#     j += 1

# print(f'максимальное количество ягод с трех соседних кустов при круговом обходе: {max_sums[max]}')